#!/usr/bin/env perl

use strict;
use warnings;

my @H = (
  42519, 105229, 36285, 25162, 25162, 23208, 21252, 20382,
  19820, 18312,  17649, 17991, 17796, 18585, 18303, 19463,
  20265, 20868,  22197, 21573, 22578, 22767, 21883, 22665,
  23560, 23832,  24225, 24657, 26214, 26895, 26586, 28128,
  27045, 26898,  27723, 27417, 28305, 26756, 25710, 23196,
  23787, 29460,  32802, 32421, 32043, 31296, 29544, 29349,
  28053, 26151,  20832, 19113, 17718, 16110, 16668, 16032,
  17505, 17244,  15429, 15498, 15198, 14886, 15546, 14286,
  14289, 13926,  13730, 13719, 13884, 13602, 13476, 13693,
  13311, 12753,  13044, 12753, 12321, 11743, 11946, 11478,
  11313, 11157,  10516, 10308, 10395, 10473, 10587, 10320,
  10071, 10335,  10458, 10434, 9537,  9561,  9975,  9282,
  9255,  10361,  10593, 8727,  10650, 9648,  7995,  9156,
  8433,  7386,   7851,  7194,  7693,  6435,  6231,  6264,
  6120,  5772,   5481,  5458,  4989,  4725,  4398,  4401,
  4413,  4389,   4220,  3894,  3915,  4035,  4062,  3786,
  3759,  3777,   3795,  3447,  3498,  3414,  3687,  3570,
  3435,  3738,   3342,  3204,  3246,  3033,  2868,  2787,
  2619,  2556,   2562,  2679,  2340,  2445,  2538,  2394,
  2238,  2151,   2301,  2361,  2199,  2277,  2298,  2307,
  2148,  2301,   2307,  2265,  2598,  2223,  2592,  2394,
  2427,  2409,   2202,  2169,  1965,  1869,  1785,  1833,
  1965,  1902,   1875,  1902,  1869,  1887,  1761,  1620,
  1605,  1584,   1533,  1455,  1491,  1425,  1380,  1395,
  1479,  1206,   1317,  1239,  1104,  1143,  1353,  1179,
  1104,  1161,   1140,  1170,  1110,  1080,  1212,  1338,
  1239,  1320,   1317,  1260,  1233,  1290,  1446,  1377,
  1449,  1392,   1434,  1458,  1401,  1413,  1374,  1530,
  1716,  1707,   1674,  1800,  1725,  1779,  1731,  2019,
  1950,  2064,   2085,  1989,  1803,  2037,  1728,  1827,
  1611,  1728,   2160,  1506,  2346,  1467,  3261,  1668,
  3843,  2292,   4656,  4203,  4776,  6240,  3546,  7444
);

my @c   = ();
my $cum = 0;
for (@H) {
  push @c, $cum;
  $cum += $_;
}
push @c, $cum;

my @hmap = ();
build_map( \@hmap, 0, 256, \@c, 0, 256 );
@hmap = interp( 0, 255, @hmap );
my @imap = interp( 0, 255, inverse(@hmap) );

for ( 0 .. $#hmap ) {
  print join( "\t", $_, $hmap[$_], $imap[$_] ), "\n";
}

sub build_map {
  my ( $hmap, $lo, $hi, $c, $clo, $chi ) = @_;
  return unless $lo < $hi && $clo < $chi;
  my $half = half( $c, $clo, $chi );
  my $mid = int( ( $lo + $hi ) / 2 );
  #  print "lo=$lo, mid=$mid, hi=$hi, clo=$clo, half=$half, chi=$chi\n";
  $hmap->[$mid] = $half;
  build_map( $hmap, $lo,      $mid - 1, $c, $clo,      $half - 1 );
  build_map( $hmap, $mid + 1, $hi,      $c, $half + 1, $chi );
}

sub half {
  my ( $samp, $lo, $hi ) = @_;
  my $med = ( $samp->[$lo] + $samp->[$hi - 1] ) / 2;
  while ( $lo < $hi ) {
    my $mid = int( ( $lo + $hi ) / 2 );
    if   ( $samp->[$mid] < $med ) { $lo = $mid + 1 }
    else                          { $hi = $mid - 1 }
  }
  return $lo;
}

sub inverse {
  my @map = @_;
  my @out = map undef, @map;
  for my $i ( 0 .. $#map ) {
    my $y = $map[$i];
    $out[$y] = $i;
  }
  return @out;
}

sub interp {
  my ( $min, $max, @map ) = @_;

  $map[0]  = $min unless defined $map[0];
  $map[-1] = $max unless defined $map[-1];

  my @out = ();

  while ( @map > 1 ) {
    my $samp  = shift @map;
    my $count = 1;
    while ( @map && !defined $map[0] ) {
      shift @map;
      $count++;
    }
    my $next = $map[0];
    my $inc  = ( $next - $samp ) / $count;
    for ( 1 .. $count ) {
      push @out, $samp;
      $samp += $inc;
    }
  }
  push @out, @map;
  return @out;
}

# vim:ts=2:sw=2:sts=2:et:ft=perl

